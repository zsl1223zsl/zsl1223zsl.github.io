<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zsl’s blog</title>
  
  
  <link href="https://zsl1223zsl.github.io/atom.xml" rel="self"/>
  
  <link href="https://zsl1223zsl.github.io/"/>
  <updated>2022-10-25T01:23:20.780Z</updated>
  <id>https://zsl1223zsl.github.io/</id>
  
  <author>
    <name>ZSL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电路基础</title>
    <link href="https://zsl1223zsl.github.io/2022/10/18/%E7%94%B5%E8%B7%AF/"/>
    <id>https://zsl1223zsl.github.io/2022/10/18/%E7%94%B5%E8%B7%AF/</id>
    <published>2022-10-18T13:28:17.389Z</published>
    <updated>2022-10-25T01:23:20.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a><strong>Chapter1</strong></h1><h3 id="齐次定理"><a href="#齐次定理" class="headerlink" title="齐次定理"></a>齐次定理</h3><p>描述：对于具有<strong>唯一解</strong>的线性电路，当只有一个激励源（独立电压源或独立电流源）作用的时候，其响应（电路任意处的电压或电流）与激励成正比。</p><img height="300" src="/2022/10/18/%E7%94%B5%E8%B7%AF/齐次定理.png" width="400" style="text-align: center"><p>上述例子使用网孔法得</p><h3 id="叠加定理"><a href="#叠加定理" class="headerlink" title="叠加定理"></a>叠加定理</h3><p>描述：对于具有唯一解的线性电路，多个激励源共同作用时引起的响应（电路中各处的电流电压）等于各个激励源单独作用（其他激励源置零）时所引起的响应之和。</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221021210353820.png" alt="image-20221021210353820" style="zoom:80%;"><p>试计算电流I：</p><p>利用叠加定理：将电流源断路， I1&#x3D;1 A，将电压源短路，I2&#x3D;1 A。</p><p>得到 I&#x3D;I1+I2&#x3D;2A</p><h3 id="替代定理"><a href="#替代定理" class="headerlink" title="替代定理"></a>替代定理</h3><h3 id="戴维南等效"><a href="#戴维南等效" class="headerlink" title="戴维南等效"></a>戴维南等效</h3><p>描述：任意一个线性一端口电路N，它对外电路的作用可以用一个电压源和电阻的串联组合来等效。该电压源的电压Uoc等于一端口电路在端口出的开路电压；电阻R0等于一端口电路内所有独立源置为0的条件下，从端口看进去的等效电阻。</p><p>计算等效电阻的方法：</p><ul><li>有无受控源<ul><li>无受控源：串并联方法</li><li>有受控源：<ul><li>外加电源法：所有的独立源置零，保留受控源，R&#x3D;U&#x2F;I</li><li>开路短路法：R&#x3D;Uoc&#x2F;Isc</li><li>伏安关系法：U&#x3D;Uoc+IR0</li></ul></li></ul></li></ul><h3 id="最大功率传输条件"><a href="#最大功率传输条件" class="headerlink" title="最大功率传输条件"></a>最大功率传输条件</h3><p>当且仅当负载电阻等于戴维宁等效内阻时，功率最大。</p><h1 id="Chapter2"><a href="#Chapter2" class="headerlink" title="Chapter2"></a><strong>Chapter2</strong></h1><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><h3 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h3><h3 id="全响应公式"><a href="#全响应公式" class="headerlink" title="全响应公式"></a>全响应公式</h3><h1 id="Chapter3"><a href="#Chapter3" class="headerlink" title="Chapter3"></a><strong>Chapter3</strong></h1><h3 id="相量"><a href="#相量" class="headerlink" title="相量"></a>相量</h3><h3 id="阻抗"><a href="#阻抗" class="headerlink" title="阻抗"></a>阻抗</h3><h3 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h3><h4 id="有功功率"><a href="#有功功率" class="headerlink" title="有功功率"></a>有功功率</h4><h4 id="无功功率"><a href="#无功功率" class="headerlink" title="无功功率"></a>无功功率</h4><h4 id="复功率"><a href="#复功率" class="headerlink" title="复功率"></a>复功率</h4><h4 id="最大功率传输条件-1"><a href="#最大功率传输条件-1" class="headerlink" title="最大功率传输条件"></a>最大功率传输条件</h4><h3 id="互感耦合电路"><a href="#互感耦合电路" class="headerlink" title="互感耦合电路"></a>互感耦合电路</h3><h4 id="耦合电感"><a href="#耦合电感" class="headerlink" title="耦合电感"></a>耦合电感</h4><h4 id="T型去耦等效"><a href="#T型去耦等效" class="headerlink" title="T型去耦等效"></a>T型去耦等效</h4><h4 id="变压器"><a href="#变压器" class="headerlink" title="变压器"></a>变压器</h4><h4 id="理想变压器"><a href="#理想变压器" class="headerlink" title="理想变压器"></a>理想变压器</h4><h1 id="Chapter4"><a href="#Chapter4" class="headerlink" title="Chapter4"></a><strong>Chapter4</strong></h1><h3 id="频率响应与网络函数"><a href="#频率响应与网络函数" class="headerlink" title="频率响应与网络函数"></a>频率响应与网络函数</h3><h3 id="一阶电路的频率响应"><a href="#一阶电路的频率响应" class="headerlink" title="一阶电路的频率响应"></a>一阶电路的频率响应</h3><h3 id="串联谐振电路"><a href="#串联谐振电路" class="headerlink" title="串联谐振电路"></a>串联谐振电路</h3><h4 id="RLC串联谐振"><a href="#RLC串联谐振" class="headerlink" title="RLC串联谐振"></a>RLC串联谐振</h4><h4 id="品质因数"><a href="#品质因数" class="headerlink" title="品质因数"></a>品质因数</h4><h4 id="频率响应"><a href="#频率响应" class="headerlink" title="频率响应"></a>频率响应</h4><h3 id="并联谐振电路"><a href="#并联谐振电路" class="headerlink" title="并联谐振电路"></a>并联谐振电路</h3><h4 id="GCL并联谐振"><a href="#GCL并联谐振" class="headerlink" title="GCL并联谐振"></a>GCL并联谐振</h4><h4 id="简单的并联谐振电路"><a href="#简单的并联谐振电路" class="headerlink" title="简单的并联谐振电路"></a>简单的并联谐振电路</h4><h4 id="复杂的并联谐振电路"><a href="#复杂的并联谐振电路" class="headerlink" title="复杂的并联谐振电路"></a>复杂的并联谐振电路</h4>]]></content>
    
    
    <summary type="html">电路基础知识要点</summary>
    
    
    
    <category term="课程" scheme="https://zsl1223zsl.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="电路" scheme="https://zsl1223zsl.github.io/tags/%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>初识链表</title>
    <link href="https://zsl1223zsl.github.io/2022/10/12/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://zsl1223zsl.github.io/2022/10/12/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</id>
    <published>2022-10-12T13:44:47.148Z</published>
    <updated>2022-10-12T13:57:43.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a><strong>链表的构建</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：读入一个数字n，再连续读入n个数字，将这些数字组成链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">build_node</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,temp;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>,*<span class="title">p</span>,*<span class="title">q</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        p=(<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));   <span class="comment">//开辟一个堆空间中的struct node大小的存储空间</span></span><br><span class="line">        p-&gt;data=temp;<span class="comment">//将读入的数字存入这个存储空间中</span></span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//新建链表时，每读入一个元素都是表尾</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="comment">//</span></span><br><span class="line">            head=p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q-&gt;next=p;</span><br><span class="line">        q=p;<span class="comment">//将当前创建的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的访问"><a href="#链表的访问" class="headerlink" title="链表的访问"></a><strong>链表的访问</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">request</span><span class="params">(<span class="keyword">struct</span> node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">t</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;data);</span><br><span class="line">        t=t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的插入"><a href="#链表的插入" class="headerlink" title="链表的插入"></a><strong>链表的插入</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设链表中的数据是从小到大排列好的，现在要向其中插入一个数字a，使其仍然维持升序排列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> a,<span class="keyword">struct</span> node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">t</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;next!=<span class="literal">NULL</span>||t-&gt;next-&gt;data&gt;a)&#123;</span><br><span class="line">            p=(<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">            p-&gt;data=a;</span><br><span class="line">            p-&gt;next=t-&gt;next;</span><br><span class="line">            t-&gt;next=p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t=t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C语言数据结构</summary>
    
    
    
    <category term="C" scheme="https://zsl1223zsl.github.io/categories/C/"/>
    
    
    <category term="C" scheme="https://zsl1223zsl.github.io/tags/C/"/>
    
    <category term="数据结构" scheme="https://zsl1223zsl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://zsl1223zsl.github.io/2022/09/25/paper/"/>
    <id>https://zsl1223zsl.github.io/2022/09/25/paper/</id>
    <published>2022-09-24T16:42:54.000Z</published>
    <updated>2022-10-12T13:44:04.127Z</updated>
    
    <content type="html"><![CDATA[<p>this is my first blog!</p><p>code test</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">基本hexo配置文件演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zsl1223zsl.github.io/2022/09/25/hello-world/"/>
    <id>https://zsl1223zsl.github.io/2022/09/25/hello-world/</id>
    <published>2022-09-24T16:13:19.340Z</published>
    <updated>2022-10-12T04:00:36.016Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
