<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zsl’s blog</title>
  
  
  <link href="https://zsl1223zsl.github.io/atom.xml" rel="self"/>
  
  <link href="https://zsl1223zsl.github.io/"/>
  <updated>2022-11-03T14:27:25.116Z</updated>
  <id>https://zsl1223zsl.github.io/</id>
  
  <author>
    <name>ZSL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电路基础</title>
    <link href="https://zsl1223zsl.github.io/2022/10/18/%E7%94%B5%E8%B7%AF/"/>
    <id>https://zsl1223zsl.github.io/2022/10/18/%E7%94%B5%E8%B7%AF/</id>
    <published>2022-10-18T13:28:17.389Z</published>
    <updated>2022-11-03T14:27:25.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a><strong>Chapter1</strong></h1><h3 id="齐次定理"><a href="#齐次定理" class="headerlink" title="齐次定理"></a>齐次定理</h3><p>描述：对于具有<strong>唯一解</strong>的线性电路，当只有一个激励源（独立电压源或独立电流源）作用的时候，其响应（电路任意处的电压或电流）与激励成正比。</p><p><img height="300" src="/2022/10/18/%E7%94%B5%E8%B7%AF/齐次定理.png" width="400" style="text-align: center"></p><p>上述例子使用网孔法得</p><script type="math/tex; mode=display">\begin{cases}(R_1+R_2)i_1-R_2i_2=u_s \\-\alpha R_3i_1-R_2i_1+(R_2+R_3+R_4)i_2=0\end{cases}</script><h3 id="叠加定理"><a href="#叠加定理" class="headerlink" title="叠加定理"></a>叠加定理</h3><p>描述：对于具有唯一解的线性电路，多个激励源共同作用时引起的响应（电路中各处的电流电压）等于各个激励源单独作用（其他激励源置零）时所引起的响应之和。</p><p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221021210353820.png" alt="image-20221021210353820" style="zoom:80%;"></p><p>试计算电流I：</p><p>利用叠加定理：将电流源断路， $I_1=1 A$，将电压源短路，$I_2=1 A$。</p><p>则：$I=I_1+I_2=2 A$</p><h3 id="替代定理"><a href="#替代定理" class="headerlink" title="替代定理"></a>替代定理</h3><h3 id="戴维南等效"><a href="#戴维南等效" class="headerlink" title="戴维南等效"></a>戴维南等效</h3><p>描述：任意一个线性一端口电路N，它对外电路的作用可以用一个电压源和电阻的串联组合来等效。该电压源的电压Uoc等于一端口电路在端口出的开路电压；电阻R0等于一端口电路内所有独立源置为0的条件下，从端口看进去的等效电阻。</p><p>计算等效电阻的方法：</p><ul><li>有无受控源<ul><li>无受控源：串并联方法</li><li>有受控源：<ul><li>外加电源法：所有的独立源置零，保留受控源，R=U/I</li><li>开路短路法：R=Uoc/Isc</li><li>伏安关系法：U=Uoc+IR0</li></ul></li></ul></li></ul><p>计算开路电压的方法:</p><p>负载支路断开，设出开路电压$u_{oc}$的参考方向，计算$u_{oc}$</p><p>计算短路电流的方法:</p><p>负载支路短路，设出短路电流$i_{sc}$的参考方向，计算$i_{sc}$</p><h3 id="最大功率传输条件"><a href="#最大功率传输条件" class="headerlink" title="最大功率传输条件"></a>最大功率传输条件</h3><p>当且仅当负载电阻等于戴维宁等效内阻时，功率最大。</p><script type="math/tex; mode=display">P_{max}=\frac{u_{oc}^2}{4R_0}(R_L=R_0)</script><h1 id="Chapter2"><a href="#Chapter2" class="headerlink" title="Chapter2"></a><strong>Chapter2</strong></h1><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><p>电容是一种存储电能的元件</p><p>单位：F（法）</p><script type="math/tex; mode=display">C=\frac{q(t)}{u(t)}</script><p>电容的VAR</p><script type="math/tex; mode=display">i(t)=C\frac{du}{dt}</script><p>如果电容的电压和电流采用<strong>非联参考方向</strong>：</p><p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221026110510055.png" alt="电容" style="center"></p><script type="math/tex; mode=display">i(t)=-C\frac{du}{dt}</script><p>电容的功率  $p(t)=i(t)u(t)$</p><ul><li><p>当$p(t)&gt;0$ 电容吸收能量，处于充电状态</p></li><li><p>当$p(t)&lt;0$ 电容放出能量，处于放电状态</p></li></ul><p>电容的储能：</p><p>$w_c(t)=\frac{1}{2}Cu^2(t)$</p><h3 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h3><p>电感式一种存储磁能的元件</p><p>单位：H（亨）</p><script type="math/tex; mode=display">L=\frac{\Psi (t)}{i(t)}</script><p>电感的VAR</p><script type="math/tex; mode=display">u(t)=L\frac{di}{dt}</script><p>如果电感的电压和电流采用<strong>非联参考方向</strong>：</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221026112657526.png" class title="电感"><script type="math/tex; mode=display">u(t)=-L\frac{di}{dt}</script><p>电感的功率  $p(t)=i(t)u(t)$</p><ul><li><p>当$p(t)&gt;0$ 电感吸收能量，处于充磁状态</p></li><li><p>当$p(t)&lt;0$ 电感放出能量，处于放磁状态</p></li></ul><p>电感的储能：</p><p>$w_L(t)=\frac{1}{2}Li^2(t)$</p><h3 id="全响应公式"><a href="#全响应公式" class="headerlink" title="全响应公式"></a>全响应公式</h3><script type="math/tex; mode=display">y(t)=[y(0_+)-y(\infty)]e^{-\frac{t}{\tau}}+y(\infty)</script><script type="math/tex; mode=display">\tau=\frac{L}{R}=RC</script><h1 id="Chapter3"><a href="#Chapter3" class="headerlink" title="Chapter3"></a><strong>Chapter3</strong></h1><h4 id="正弦量"><a href="#正弦量" class="headerlink" title="正弦量"></a>正弦量</h4><p>瞬时值表达式</p><script type="math/tex; mode=display">i(t)=I_mcos(\omega t+\phi_i)</script><script type="math/tex; mode=display">u(t)=U_mcos(\omega t+\phi_i)</script><p>三要素：</p><ul><li>振幅 <script type="math/tex">U_m、I_m</script></li><li>角频率 <script type="math/tex">\omega</script></li><li>初相 <script type="math/tex">\phi_i</script></li></ul><p>有效值：</p><script type="math/tex; mode=display">I=\sqrt{\frac{1}{T} \int_0^T{i^2(t)dt}} \qquad U=\sqrt{\frac{1}{T} \int_0^T{u^2(t)dt}}</script><script type="math/tex; mode=display">I=\frac{I_m}{\sqrt{2}} \qquad U=\frac{U_m}{\sqrt{2}}</script><blockquote><p>PS:平时所说的正弦交流电的大小指的都是有效值，如：民用交流电压220V</p></blockquote><h3 id="相量"><a href="#相量" class="headerlink" title="相量"></a>相量</h3><p>使用范围：同频率的正弦量之间的运算</p><p>为什么要用相量表示正弦量：为了简便运算</p><p>构造一个复函数<script type="math/tex">A(t)=\sqrt{2}Ie^{j(\omega t+\phi)}=\sqrt{2}Icos(\omega t+\phi)+j\sqrt{2}Isin(\omega t+\phi)</script></p><p>其中的实部是一个正弦量</p><p>其中<script type="math/tex">A(t)</script>还可以写成一下形式：</p><script type="math/tex; mode=display">A(t)=\sqrt{2}Ie^{j\phi}e^{j\omega t}</script><p>可以定义一个复常数 <script type="math/tex">\dot{I}=Ie^{j\phi}=I\angle\phi_i</script></p><p>相量的运算</p><ol><li>相量的加减</li></ol><script type="math/tex; mode=display">\dot{U}=\dot{U_1}+\dot{U_2}</script><ol><li>相量的微积分运算</li></ol><script type="math/tex; mode=display">\frac{di(t)}{dt}\leftarrow\rightarrow j\omega\dot{I}</script><script type="math/tex; mode=display">\int i(t)dt\leftarrow\rightarrow \frac{\dot{I}}{j\omega}</script><h3 id="阻抗"><a href="#阻抗" class="headerlink" title="阻抗"></a>阻抗</h3><script type="math/tex; mode=display">Z=\frac{\dot{U}}{\dot{I}}=\lvert Z\rvert\angle\theta_Z=R+jX</script><ul><li>阻抗模 <script type="math/tex">\lvert Z\rvert=\frac{U}{I}=\sqrt{R^2+X^2}</script></li><li>阻抗角 <script type="math/tex">\theta_Z=\phi_u-\phi_i=arctan\frac{X}{R}</script></li></ul><h3 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h3><h4 id="瞬时功率"><a href="#瞬时功率" class="headerlink" title="瞬时功率"></a>瞬时功率</h4><script type="math/tex; mode=display">p(t)=u(t)i(t)</script><h4 id="平均功率（有功功率）"><a href="#平均功率（有功功率）" class="headerlink" title="平均功率（有功功率）"></a>平均功率（有功功率）</h4><script type="math/tex; mode=display">P=UIcos\theta</script><p>单位：瓦（W）</p><blockquote><p><script type="math/tex">\theta=\phi_u-\phi_i</script> 称为功率因数角</p><p><script type="math/tex">cos\theta</script> 称为功率因数</p></blockquote><h4 id="无功功率Q"><a href="#无功功率Q" class="headerlink" title="无功功率Q"></a>无功功率Q</h4><script type="math/tex; mode=display">Q=UIsin\theta</script><p>单位：乏(var)</p><p>实际意义：反应电路N与外电路交换功率的大小，有储能元件L、C决定</p><h4 id="视在功率S"><a href="#视在功率S" class="headerlink" title="视在功率S"></a>视在功率S</h4><script type="math/tex; mode=display">S=UI</script><p>单位：伏安（VA）</p><p>实际意义：反应电器设备的容量</p><h4 id="最大功率传输条件-1"><a href="#最大功率传输条件-1" class="headerlink" title="最大功率传输条件"></a>最大功率传输条件</h4><p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221027151831535.png" alt="image-20221027151831535" style="zoom:80%;"></p><p>我们来讨论一下正弦稳态电路中的负载<script type="math/tex">Z_L</script>获得最大功率<script type="math/tex">P_{max}</script>的条件</p><blockquote><p>不妨设<script type="math/tex">Z_S=R_S+jX_S \quad Z_S=R_S+jX_S</script></p><p>则有<script type="math/tex">\dot{I}=\frac{\dot{U_s}}{Z_S+Z_L} \quad I=\frac{U_s}{\sqrt{(R_S+R_L)^2+(X_R+X_L)^2}}</script></p><p>如果<script type="math/tex">Z_L=R_L+jX_L</script>可以任意改变(共轭匹配)</p><script type="math/tex; mode=display">P_{max}=\frac{U_s^2}{4R_s}</script><p>条件：</p><script type="math/tex; mode=display">\begin{cases}R_L=R_S\\X_L=-X_S\end{cases}</script><p>如果<script type="math/tex">Z_L=R_L+jX_L=\lvert Z\rvert \angle \theta</script> 其中<script type="math/tex">\lvert Z_L\rvert</script>可以任意改变，但是<script type="math/tex">\theta</script>不变（模匹配）</p><script type="math/tex; mode=display">P_{max}=\frac{cos\theta U_S^2}{2\lvert Z \rvert + 2(R_Scos\theta+X_Ssin\theta)}</script><p>条件：</p><script type="math/tex; mode=display">\lvert Z_S\rvert = \lvert Z_L\rvert</script></blockquote><h3 id="互感耦合电路"><a href="#互感耦合电路" class="headerlink" title="互感耦合电路"></a>互感耦合电路</h3><h4 id="耦合电感"><a href="#耦合电感" class="headerlink" title="耦合电感"></a>耦合电感</h4><p>但有一个线圈中通有电流时，在自身中激发自磁通，其中有一部分通过另外一个线圈，称为互磁通。</p><p>耦合系数k（用于描述两个线圈耦合的松紧程度）</p><script type="math/tex; mode=display">k=\sqrt{\frac{\Phi_{21}}{\Phi_{11}}\frac{\Phi_{12}}{\Phi_{22}}}=\frac{M}{\sqrt{L_1L_2}}</script><ul><li>无耦合：k=0,M=0，两个线圈互不影响</li><li>全耦合：k=1</li></ul><p>同名端：当电流从两线圈各自的某端子同时流入(或同时流出)时，若两线圈产生的磁通相助</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103215924667.png" class title="同名端"><p>异名端：当电流从两线圈各自的某端子同时流入(或同时流出)时，若两线圈产生的磁通相消</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103220014693.png" class title="异名端"><h4 id="T型去耦等效"><a href="#T型去耦等效" class="headerlink" title="T型去耦等效"></a>T型去耦等效</h4><p>同名端等效：</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103220145863.png" class title="同名端T型等效"><p>异名端等效：</p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103220233171.png" class title="异名端等效"><p>几个T型去耦等效的例子</p><ol><li><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103220616199.png" alt="T型去耦等效例子" style="zoom: 70%;"></li><li><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103220728533.png" alt="T型去耦等效例子2" style="zoom:92%;"></li><li><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103221022145.png" alt="T型去耦等效例子3" style="zoom:81%;"></li></ol><h4 id="变压器"><a href="#变压器" class="headerlink" title="变压器"></a>变压器</h4><h5 id="理想变压器"><a href="#理想变压器" class="headerlink" title="理想变压器"></a>理想变压器</h5><p>条件：</p><ol><li>全耦合,k=1</li><li>自感$L_1、L_2\rightarrow \infty$,且$\frac{L_1}{L_2}$为常数</li><li>无损耗</li></ol><p>特性：</p><p><img src="/2022/10/18/%E7%94%B5%E8%B7%AF/image-20221103221607806.png" alt="image-20221103221607806" style="zoom:80%;float:left"></p><p>$n=\frac{N_1}{N_2}$</p><ol><li><p>变压特性</p><script type="math/tex; mode=display">\frac{u_1}{u_2}=\frac{N_1}{N_2}=n</script><blockquote><p>PS:如果是异名端，则$\frac{u_1}{u_2}=-\frac{N_1}{N_2}=-n$</p></blockquote></li><li><p>变流特性</p><script type="math/tex; mode=display">i_1(t)=-\frac{N_2}{N_1}i_2(t)=-\frac{1}{n}i_2(t)</script><blockquote><p>PS:如果是异名端，则$i_1(t)=\frac{N_2}{N_1}i_2(t)=\frac{1}{n}i_2(t)$</p></blockquote></li><li><p>变阻特性</p><script type="math/tex; mode=display">Z_{in}=(\frac{N_1}{N_2})^2Z_L=n^2Z_L</script><blockquote><p>PS:变阻特性与同名端一名端没有关系</p></blockquote></li></ol><ol><li></li></ol><h1 id="Chapter4"><a href="#Chapter4" class="headerlink" title="Chapter4"></a><strong>Chapter4</strong></h1><h3 id="频率响应与网络函数"><a href="#频率响应与网络函数" class="headerlink" title="频率响应与网络函数"></a>频率响应与网络函数</h3><p>网络函数是用来描述电路的频率特性</p><script type="math/tex; mode=display">H(j\omega)=\frac{响应相量\dot{Y}}{激励相量\dot{F}}</script><p>网络函数一般是$\omega$的复函数，亦可写作：</p><script type="math/tex; mode=display">H(j\omega)=\lvert H(j\omega)\rvert e^{j\theta(\omega)}</script><p>幅频特性</p><p>相频特性</p><h3 id="一阶电路的频率响应"><a href="#一阶电路的频率响应" class="headerlink" title="一阶电路的频率响应"></a>一阶电路的频率响应</h3><h3 id="串联谐振电路"><a href="#串联谐振电路" class="headerlink" title="串联谐振电路"></a>串联谐振电路</h3><h4 id="RLC串联谐振"><a href="#RLC串联谐振" class="headerlink" title="RLC串联谐振"></a>RLC串联谐振</h4><h4 id="品质因数"><a href="#品质因数" class="headerlink" title="品质因数"></a>品质因数</h4><h4 id="频率响应"><a href="#频率响应" class="headerlink" title="频率响应"></a>频率响应</h4><h3 id="并联谐振电路"><a href="#并联谐振电路" class="headerlink" title="并联谐振电路"></a>并联谐振电路</h3><h4 id="GCL并联谐振"><a href="#GCL并联谐振" class="headerlink" title="GCL并联谐振"></a>GCL并联谐振</h4><h4 id="简单的并联谐振电路"><a href="#简单的并联谐振电路" class="headerlink" title="简单的并联谐振电路"></a>简单的并联谐振电路</h4><h4 id="复杂的并联谐振电路"><a href="#复杂的并联谐振电路" class="headerlink" title="复杂的并联谐振电路"></a>复杂的并联谐振电路</h4>]]></content>
    
    
    <summary type="html">电路基础知识要点</summary>
    
    
    
    <category term="课程" scheme="https://zsl1223zsl.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="电路" scheme="https://zsl1223zsl.github.io/tags/%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>初识链表</title>
    <link href="https://zsl1223zsl.github.io/2022/10/12/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://zsl1223zsl.github.io/2022/10/12/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</id>
    <published>2022-10-12T13:44:47.148Z</published>
    <updated>2022-10-12T13:57:43.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a><strong>链表的构建</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：读入一个数字n，再连续读入n个数字，将这些数字组成链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">build_node</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,temp;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>,*<span class="title">p</span>,*<span class="title">q</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        p=(<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));   <span class="comment">//开辟一个堆空间中的struct node大小的存储空间</span></span><br><span class="line">        p-&gt;data=temp;<span class="comment">//将读入的数字存入这个存储空间中</span></span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//新建链表时，每读入一个元素都是表尾</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="comment">//</span></span><br><span class="line">            head=p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q-&gt;next=p;</span><br><span class="line">        q=p;<span class="comment">//将当前创建的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的访问"><a href="#链表的访问" class="headerlink" title="链表的访问"></a><strong>链表的访问</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">request</span><span class="params">(<span class="keyword">struct</span> node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">t</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;data);</span><br><span class="line">        t=t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的插入"><a href="#链表的插入" class="headerlink" title="链表的插入"></a><strong>链表的插入</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设链表中的数据是从小到大排列好的，现在要向其中插入一个数字a，使其仍然维持升序排列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> a,<span class="keyword">struct</span> node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">t</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;next!=<span class="literal">NULL</span>||t-&gt;next-&gt;data&gt;a)&#123;</span><br><span class="line">            p=(<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">            p-&gt;data=a;</span><br><span class="line">            p-&gt;next=t-&gt;next;</span><br><span class="line">            t-&gt;next=p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t=t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C语言数据结构</summary>
    
    
    
    <category term="C" scheme="https://zsl1223zsl.github.io/categories/C/"/>
    
    
    <category term="C" scheme="https://zsl1223zsl.github.io/tags/C/"/>
    
    <category term="数据结构" scheme="https://zsl1223zsl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://zsl1223zsl.github.io/2022/09/25/paper/"/>
    <id>https://zsl1223zsl.github.io/2022/09/25/paper/</id>
    <published>2022-09-24T16:42:54.000Z</published>
    <updated>2022-10-12T13:44:04.127Z</updated>
    
    <content type="html"><![CDATA[<p>this is my first blog!</p><p>code test<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">基本hexo配置文件演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zsl1223zsl.github.io/2022/09/25/hello-world/"/>
    <id>https://zsl1223zsl.github.io/2022/09/25/hello-world/</id>
    <published>2022-09-24T16:13:19.340Z</published>
    <updated>2022-10-12T04:00:36.016Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
